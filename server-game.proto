option optimize_for = LITE_RUNTIME;

package orwell.messages;

// Information about the team
// not sent on its own
message Team {
    required string name = 1;
	optional uint32 score = 2;
	optional uint32 num_players = 3;
	repeated string players = 4;
}

// Notify or give the current game state (started or not)
// Can be embedded
message GameState {
	required bool playing = 1;
	// number of seconds left before the game ends (useless if playing is false)
	optional uint64 seconds = 2;
	repeated Team teams = 3;
	// only set when playing is false and seconds is 0 (ie when the game is finished)
	optional string winner = 4;
}

// Tell a player how (s)he is and where (s)he plays
// reply to: Hello
message Welcome {
	required string robot = 1;
	required string team = 2;
	optional GameState game_state = 3;
	required string id = 4;
	required string video_address = 5;
	required uint32 video_port = 6;
}

// Tell a player that (s)he is not welcome
// reply to: Hello
message Goodbye {
}

// Tell a player how to connect to the game server
// reply to: GetAccess (through the web server)
message Access {
	required uint32 port = 1;
	// default means same ip as the one used to send GetAccess
	optional string ip = 2 [default = ""];
}

// Notify the players or the robots that the game starts
message Start {
	optional GameState game_state = 1;
}

// Notify the players or the robots that the games stops
message Stop {
	optional bool shutdown = 1 [default = false];
	optional bool video = 2 [default = true];
}

// Tell a robot what its name is (if the name is empty the registration failed).
// reply to: Register
message Registered {
	// this is the definitive robot ID to be used for communications
	required string robot_id = 1;
	optional string team = 2;
}

